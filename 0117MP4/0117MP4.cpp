
// 0117MP4.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "0117MP4.h"
#include "0117MP4Dlg.h"
#include "UDPMediator.h"
#include <time.h>
#pragma comment(lib,"lib\\SkinPPWTL.lib")

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMy0117MP4App

BEGIN_MESSAGE_MAP(CMy0117MP4App, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CMy0117MP4App 构造

CMy0117MP4App::CMy0117MP4App()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CMy0117MP4App 对象

CMy0117MP4App theApp;


// CMy0117MP4App 初始化

BOOL CMy0117MP4App::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	/*skin\\Aura.ssk*/
	/*skin\\bOzen.ssk*/
	/*skin\\Devoir.ssk*/
	/*skin\\Mako.ssk*/
	/*skin\\RedCopper.ssk*/
	/*skin\\Royale.ssk*/
	/*skin\\SlickOS2.ssk*/
	/*skin\\thinblue.ssk*/
	/*skin\\XP-Home.ssk*/
	/*skin\\XP-Metallic.ssk*/
	
	m_videoManager = new VideoManager;
	m_pUDPMediator = new UDPMediator;
	//初始化m_videoManager
	m_videoManager->InitPlayer();
	//创建装截图的文件夹
	if(!PathIsDirectory(g_AppPath)){
		CreateDirectory(g_AppPath,NULL);
	}
	if(!PathIsDirectory(_T("C:\\fengteng\\screenshot"))){
		CreateDirectory(_T("C:\\fengteng\\screenshot"),NULL);
	}
	if(!PathIsDirectory(_T("C:\\fengteng\\video"))){
		CreateDirectory(_T("C:\\fengteng\\video"),NULL);
	}
	//读取配置文件
	if(this->ReadConfig())
	{
		CString VideoDownPath = this->GetVideoDown();
		CString VideoHistPath = this->GetVideoHist();
		CString ScreenShotPath = this->GetScreenShot();
		_tcscpy_s(g_DownLoadVideoPath,VideoDownPath.GetBuffer());
		_tcscpy_s(g_HistVideoPath,VideoHistPath.GetBuffer());
		_tcscpy_s(g_ScreenSnapShotPath,ScreenShotPath.GetBuffer());
	}else
	{
		CString VideoDownPath = _T("C:\\fengteng\\video");
		CString VideoHistPath = _T("C:\\fengteng\\video");
		CString ScreenShotPath = _T("C:\\fengteng\\screenshot");
		_tcscpy_s(g_DownLoadVideoPath,VideoDownPath.GetBuffer());
		_tcscpy_s(g_HistVideoPath,VideoHistPath.GetBuffer());
		_tcscpy_s(g_ScreenSnapShotPath,ScreenShotPath.GetBuffer());
	}
	//设置随机数种子
	srand(0);
	//_CrtSetBreakAlloc(354); 
	CMy0117MP4Dlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}
	else if (nResponse == -1)
	{
		TRACE(traceAppMsg, 0, "警告: 对话框创建失败，应用程序将意外终止。\n");
		TRACE(traceAppMsg, 0, "警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n");
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

bool CMy0117MP4App::ReadConfig()
{
	return m_ReadConfig.ReadConfig();
}
bool CMy0117MP4App::WriteConfig()
{
	return m_WriteConfig.WriteConfig();
}
CString CMy0117MP4App::GetVideoDown()
{
	string path = m_ReadConfig.GetVideoDown();
	WCHAR* wStr = CMyTools::EnCodeUtfToWCHAR(const_cast<char*>(path.c_str()));
	CString VideoDown(wStr);
	delete[] wStr;
	wStr = NULL;
	return VideoDown;
}
CString CMy0117MP4App::GetVideoHist()
{
	string path = m_ReadConfig.GetVideoHist();
	WCHAR* wStr = CMyTools::EnCodeUtfToWCHAR(const_cast<char*>(path.c_str()));
	CString VideoHist(wStr);
	delete[] wStr;
	wStr = NULL;
	return VideoHist;
}
CString CMy0117MP4App::GetScreenShot()
{
	string path = m_ReadConfig.GetScreenShot();
	WCHAR* wStr = CMyTools::EnCodeUtfToWCHAR(const_cast<char*>(path.c_str()));
	CString ScreenShot(wStr);
	delete[] wStr;
	wStr = NULL;
	return ScreenShot;
}
bool CMy0117MP4App::SetVideoDown(CString VideoDown)
{
	char* str = CMyTools::EnCodeWCHARToUtf(VideoDown.GetBuffer());
	string videodown(str);
	delete[] str;
	str = NULL;
	return m_WriteConfig.SetVideoDown(videodown);
}
bool CMy0117MP4App::SetVideoHist(CString VideoHist)
{
	char* str = CMyTools::EnCodeWCHARToUtf(VideoHist.GetBuffer());
	string videohist(str);
	delete[] str;
	str = NULL;
	return m_WriteConfig.SetVideoHist(videohist);
}
bool CMy0117MP4App::SetScreenShot(CString ScreenShot)
{
	char* str = CMyTools::EnCodeWCHARToUtf(ScreenShot.GetBuffer());
	string screenshot(str);
	delete[] str;
	str = NULL;
	return m_WriteConfig.SetScreenShot(screenshot);
}

int CMy0117MP4App::ExitInstance()
{
	// TODO: 在此添加专用代码和/或调用基类
	if(m_videoManager){
		delete m_videoManager;
		m_videoManager=NULL;
	}
	if(m_pUDPMediator){
		delete m_pUDPMediator;
		m_pUDPMediator=NULL;
	}
	skinppExitSkin();
	return CWinApp::ExitInstance();
}
